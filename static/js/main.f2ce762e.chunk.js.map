{"version":3,"sources":["Card/Card.jsx","CardList/CardList.jsx","Search/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","console","log","monstorsRobot","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAgBeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,SAEN,6BAA4BL,EAAMG,QAAQG,MAAjCN,EAAMG,QAAQC,IACvB,4BAAIJ,EAAMG,QAAQI,YCKTC,EAZE,SAACR,GAGhB,OAFAS,QAAQC,IAAIV,GAGV,qBAAKC,UAAU,YAAf,SACGD,EAAMW,cAAcC,KAAI,SAACT,GAAD,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCMZS,G,MAbA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC7B,OACE,8BACE,uBACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,QCmCHG,E,kDAvCb,aAAe,IAAD,8BACZ,gBAWFH,aAAe,SAACI,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAXxB,EAAKC,MAAQ,CACXb,cAAe,GACfU,YAAY,IALF,E,qDAmBd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,cAAekB,S,oBAGpD,WACE,MAAuCC,KAAKN,MAApCb,EAAR,EAAQA,cAAeU,EAAvB,EAAuBA,YACjBU,EAAmBpB,EAAcqB,QAAO,SAAC7B,GAAD,OAC5CA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKhC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAQa,YAAY,SAASC,aAAce,KAAKf,eAChD,cAAC,EAAD,CAAUJ,cAAeoB,W,GAnCfI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f2ce762e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt=\"pics\"\n      />\n      <h2 key={props.monster.id}>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport Card from \"../Card/Card\";\n\nconst CardList = (props) => {\n  console.log(props);\n\n  return (\n    <div className=\"card-list\">\n      {props.monstorsRobot.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nconst Search = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./CardList/CardList\";\nimport Search from \"./Search/Search\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monstorsRobot: [],\n      searchField: ``,\n    };\n\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  // class METHOD.\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value,\n    });\n  };\n\n  // life cylcel method.\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then((res) => res.json())\n      .then((users) => this.setState({ monstorsRobot: users }));\n  }\n\n  render() {\n    const { monstorsRobot, searchField } = this.state;\n    const filteredMonsters = monstorsRobot.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Robot Monsters</h1>\n        <Search placeholder=\"search\" handleChange={this.handleChange} />\n        <CardList monstorsRobot={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}